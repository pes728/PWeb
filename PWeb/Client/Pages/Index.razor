@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using System.Text.Json
@inject HttpClient Http;

@using PWeb.Shared;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message.user: @message.message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<Message> messages = new List<Message>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messages.Add(new Message(user, message));
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        List<Message> incoming = await Http.GetFromJsonAsync<List<Message>>("api/chat");

        if (incoming != null)
        {
            messages = incoming;

        }
    }

    async Task Send() {
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);

        Console.WriteLine(JsonContent.Create(new Message(userInput, messageInput).ToString()));
        await Http.PostAsync("api/chat", JsonContent.Create(new Message(userInput, messageInput)));
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}